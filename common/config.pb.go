// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package common

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Nil is nil
type Nil struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nil) Reset()         { *m = Nil{} }
func (m *Nil) String() string { return proto.CompactTextString(m) }
func (*Nil) ProtoMessage()    {}
func (*Nil) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

func (m *Nil) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nil.Unmarshal(m, b)
}
func (m *Nil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nil.Marshal(b, m, deterministic)
}
func (m *Nil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nil.Merge(m, src)
}
func (m *Nil) XXX_Size() int {
	return xxx_messageInfo_Nil.Size(m)
}
func (m *Nil) XXX_DiscardUnknown() {
	xxx_messageInfo_Nil.DiscardUnknown(m)
}

var xxx_messageInfo_Nil proto.InternalMessageInfo

// ConfigSources is a collection of data sources
type ConfigSources struct {
	Sources              []*ConfigSource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ConfigSources) Reset()         { *m = ConfigSources{} }
func (m *ConfigSources) String() string { return proto.CompactTextString(m) }
func (*ConfigSources) ProtoMessage()    {}
func (*ConfigSources) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

func (m *ConfigSources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSources.Unmarshal(m, b)
}
func (m *ConfigSources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSources.Marshal(b, m, deterministic)
}
func (m *ConfigSources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSources.Merge(m, src)
}
func (m *ConfigSources) XXX_Size() int {
	return xxx_messageInfo_ConfigSources.Size(m)
}
func (m *ConfigSources) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSources.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSources proto.InternalMessageInfo

func (m *ConfigSources) GetSources() []*ConfigSource {
	if m != nil {
		return m.Sources
	}
	return nil
}

// ConfigSource defines a remote data source
type ConfigSource struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	Store                string   `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSource.Unmarshal(m, b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return xxx_messageInfo_ConfigSource.Size(m)
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ConfigSource) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ConfigSource) GetStore() string {
	if m != nil {
		return m.Store
	}
	return ""
}

// FetchWork tells a fetcher all its jobs.
type FetchWork struct {
	Jobs                 []*FetchJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FetchWork) Reset()         { *m = FetchWork{} }
func (m *FetchWork) String() string { return proto.CompactTextString(m) }
func (*FetchWork) ProtoMessage()    {}
func (*FetchWork) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

func (m *FetchWork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchWork.Unmarshal(m, b)
}
func (m *FetchWork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchWork.Marshal(b, m, deterministic)
}
func (m *FetchWork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchWork.Merge(m, src)
}
func (m *FetchWork) XXX_Size() int {
	return xxx_messageInfo_FetchWork.Size(m)
}
func (m *FetchWork) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchWork.DiscardUnknown(m)
}

var xxx_messageInfo_FetchWork proto.InternalMessageInfo

func (m *FetchWork) GetJobs() []*FetchJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

// FetchJob tells a fetcher to do something.
type FetchJob struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	Store                string   `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchJob) Reset()         { *m = FetchJob{} }
func (m *FetchJob) String() string { return proto.CompactTextString(m) }
func (*FetchJob) ProtoMessage()    {}
func (*FetchJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
}

func (m *FetchJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchJob.Unmarshal(m, b)
}
func (m *FetchJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchJob.Marshal(b, m, deterministic)
}
func (m *FetchJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchJob.Merge(m, src)
}
func (m *FetchJob) XXX_Size() int {
	return xxx_messageInfo_FetchJob.Size(m)
}
func (m *FetchJob) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchJob.DiscardUnknown(m)
}

var xxx_messageInfo_FetchJob proto.InternalMessageInfo

func (m *FetchJob) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FetchJob) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *FetchJob) GetStore() string {
	if m != nil {
		return m.Store
	}
	return ""
}

func init() {
	proto.RegisterType((*Nil)(nil), "common.Nil")
	proto.RegisterType((*ConfigSources)(nil), "common.ConfigSources")
	proto.RegisterType((*ConfigSource)(nil), "common.ConfigSource")
	proto.RegisterType((*FetchWork)(nil), "common.FetchWork")
	proto.RegisterType((*FetchJob)(nil), "common.FetchJob")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce, 0xcf, 0xcd, 0xcd, 0xcf,
	0x53, 0x62, 0xe5, 0x62, 0xf6, 0xcb, 0xcc, 0x51, 0xb2, 0xe7, 0xe2, 0x75, 0x06, 0x4b, 0x07, 0xe7,
	0x97, 0x16, 0x25, 0xa7, 0x16, 0x0b, 0xe9, 0x71, 0xb1, 0x17, 0x43, 0x98, 0x12, 0x8c, 0x0a, 0xcc,
	0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x10, 0x1d, 0x7a, 0xc8, 0xea, 0x82, 0x60, 0x8a, 0x94, 0xdc, 0xb8,
	0x78, 0x90, 0x25, 0x84, 0xf8, 0xb8, 0x98, 0x3c, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0x98, 0x3c, 0x5d, 0x84, 0x04, 0xb8, 0x98, 0x43, 0x83, 0x7c, 0x24, 0x98, 0xc0, 0x02, 0x20, 0xa6,
	0x90, 0x08, 0x17, 0x6b, 0x71, 0x49, 0x7e, 0x51, 0xaa, 0x04, 0x33, 0x58, 0x0c, 0xc2, 0x51, 0x32,
	0xe4, 0xe2, 0x74, 0x4b, 0x2d, 0x49, 0xce, 0x08, 0xcf, 0x2f, 0xca, 0x16, 0x52, 0xe1, 0x62, 0xc9,
	0xca, 0x4f, 0x82, 0xb9, 0x40, 0x00, 0xe6, 0x02, 0xb0, 0x02, 0xaf, 0xfc, 0xa4, 0x20, 0xb0, 0xac,
	0x92, 0x13, 0x17, 0x07, 0x4c, 0x84, 0x5c, 0x6b, 0x8d, 0x32, 0xb9, 0xd8, 0x20, 0xce, 0x17, 0x32,
	0xe2, 0xe2, 0x72, 0x4f, 0x2d, 0x81, 0x05, 0x03, 0x37, 0xcc, 0x4e, 0xbf, 0xcc, 0x1c, 0x29, 0x51,
	0x6c, 0x41, 0x50, 0xac, 0xc4, 0x20, 0xa4, 0xcd, 0xc5, 0xee, 0x9e, 0x5a, 0x02, 0x76, 0x32, 0x8a,
	0x06, 0x41, 0x14, 0x17, 0x83, 0xe4, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x11, 0x60, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x2f, 0x75, 0x59, 0x90, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	GetSources(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*ConfigSources, error)
	GetWork(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*FetchWork, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) GetSources(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*ConfigSources, error) {
	out := new(ConfigSources)
	err := c.cc.Invoke(ctx, "/common.Config/GetSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetWork(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*FetchWork, error) {
	out := new(FetchWork)
	err := c.cc.Invoke(ctx, "/common.Config/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	GetSources(context.Context, *Nil) (*ConfigSources, error)
	GetWork(context.Context, *Nil) (*FetchWork, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) GetSources(ctx context.Context, req *Nil) (*ConfigSources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (*UnimplementedConfigServer) GetWork(ctx context.Context, req *Nil) (*FetchWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.Config/GetSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetSources(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.Config/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetWork(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSources",
			Handler:    _Config_GetSources_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _Config_GetWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
